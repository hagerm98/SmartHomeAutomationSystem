syntax = "proto3";


option java_multiple_files = true;
option java_package = "smarthome.generated";
option java_outer_classname = "SmartHomeController";

package smarthome;

message Empty {}

// Enums

enum DeviceState {
  OFF = 0;
  ON = 1;
}

enum LockState {
  LOCKED = 0;
  UNLOCKED = 1;
}

message OperationResponse {
  string operationName = 1;
  bool isSuccessful = 2;
}

// -------------

// Lighting Control Service

service LightingControlService {
  rpc setLightingSchedule(LightingScheduleRequest) returns (OperationResponse) {}
  rpc setLightingState(LightingStateRequest) returns (OperationResponse) {}
  rpc setLightingBrightness(LightingBrightnessRequest) returns (OperationResponse) {}
  rpc respondToMotionDetection(stream MotionDetectedEvent) returns (Empty) {}
  rpc registerLightingDevice(LightingDevice) returns (OperationResponse) {}
  rpc deregisterLightingDevice(LightingDevice) returns (OperationResponse) {}
}

message LightingScheduleRequest {
  int32 roomNumber = 1;
  DeviceState lightingState = 2;
  float brightness = 3;
  int32 startHour = 4;
  int32 endHour = 5;
}

message LightingStateRequest {
  int32 deviceNumber = 1;
  DeviceState lightingState = 2;
}

message LightingBrightnessRequest {
  int32 deviceNumber = 1;
  float brightness = 2;
}

message MotionDetectedEvent {
  int32 roomNumber = 1;
}

message LightingDevice {
  int32 roomNumber = 1;
  int32 deviceNumber = 2;
}

// -------------------

// Climate Control Service

service ClimateControlService {
  rpc setTargetClimateSettings(TargetClimateSetting) returns (OperationResponse) {}
  rpc respondToHumidityReading(stream HumidityChangeEvent) returns (Empty) {}
  rpc respondToTemperatureReading(stream TemperatureChangeEvent) returns (Empty) {}
  rpc setHeatingState(HeatingStateRequest) returns (OperationResponse) {}
  rpc setACState(ACStateRequest) returns (OperationResponse) {}
  rpc setHumidifierDehumidifierState(HumidifierDehumidifierStateRequest) returns (OperationResponse) {}
}

message TargetClimateSetting {
  int32 roomNumber = 1;
  int32 targetTemperature = 2;
  int32 targetHumidity = 3;
}

message HumidityChangeEvent {
  int32 roomNumber = 1;
  int32 humidity = 2;
}

message TemperatureChangeEvent {
  int32 roomNumber = 1;
  int32 temperature = 2;
}

message HeatingStateRequest {
  int32 roomNumber = 1;
  DeviceState heatingState = 2;
}

message ACStateRequest {
  int32 roomNumber = 1;
  DeviceState acState = 2;
}

enum HumidifierDehumidifierState {
  HUMIDIFIER = 0;
  DEHUMIDIFIER = 1;
  HUMIDIFIER_DEHUMIDIFIER_OFF = 2;
}

message HumidifierDehumidifierStateRequest {
  int32 roomNumber = 1;
  HumidifierDehumidifierState state = 2;
}

// ---------------------

// Security Service

service HomeSecurityService {
  rpc lockDoor(LockDoorRequest) returns (OperationResponse) {}
  rpc unlockDoor(UnlockDoorRequest) returns (OperationResponse) {}
  rpc registerSecurityDevice(SecurityDevice) returns (OperationResponse) {}
  rpc deregisterSecurityDevice(SecurityDevice) returns (OperationResponse) {}
  rpc monitorEvents(stream SecurityEvent) returns (stream SecurityEventAction) {}
}

message LockDoorRequest {
  int32 doorNumber = 1;
}

message UnlockDoorRequest {
  int32 doorNumber = 1;
}

enum SecurityDeviceType {
  CAMERA = 0;
  ALARM = 1;
  DOOR = 2;
  MOTION_ACTION_DETECTOR = 3;
  BREAK_IN_DETECTOR = 4;
}

message SecurityDevice {
  int32 roomNumber = 1;
  int32 deviceNumber = 2;
  SecurityDeviceType deviceType = 3;
}

enum SecurityEventType {
  NO_EVENT = 0;
  FIRE_DETECTED = 1;
  BREAK_IN_DETECTED = 2;
  OUTDOOR_MOTION_DETECTED = 3;
  DOORBELL_RING = 4;
}

message SecurityEvent {
  int32 deviceNumber = 1;
  SecurityDeviceType deviceType = 2;
  uint64 timestamp = 3;
}

message SecurityEventAction {
  uint64 timestamp = 1;

  enum SecurityAction {
    NO_ACTION = 0;
    ACTIVATE_ALARM = 1;
    NOTIFY_USER = 2;
    UNLOCK_DOOR = 3;
    LOCK_DOOR = 4;
  }
  SecurityAction action = 2;
}

// ---------------------------

// Authentication Service

service AuthenticationService {
  rpc Login(LoginRequest) returns (LoginResponse) {}
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {}
  rpc CreateUser(CreateUserRequest) returns (OperationResponse) {}
  rpc DeleteUser(DeleteUserRequest) returns (OperationResponse) {}
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  bool isSuccessful = 1;
  string jwt_token = 2;
}

message ValidateTokenRequest {
  string username = 1;
  string jwt_token = 2;
}

enum UserRole {
  ADMIN = 0;
  USER = 1;
}

message ValidateTokenResponse {
  bool isValid = 1;
  string username = 2;
  UserRole role = 3;
}

message CreateUserRequest {
  string admin_jwt = 1;
  string username = 2;
  string password = 3;
  UserRole role = 4;
}

message DeleteUserRequest {
  string admin_jwt = 1;
  string username = 2;
}

// ---------------------------

// Central Control Service

service CentralControlService {
  // Lighting Control Operations
  rpc scheduleLighting(LightingScheduleRequest) returns (OperationResponse) {}
  rpc controlLighting(LightingCommand) returns (OperationResponse) {}
  rpc viewLightingDeviceHistory(LightingDevice) returns (stream DeviceHistory) {}

  // Climate Control
  rpc adjustTargetClimate(TargetClimateSetting) returns (OperationResponse) {}
  rpc controlClimateDevice(ClimateCommand) returns (OperationResponse) {}
  rpc viewClimateDeviceHistory(Device) returns (stream DeviceHistory) {}

  // Authentication
  rpc login(LoginRequest) returns (LoginResponse) {}
  rpc createUser(CreateUserRequest) returns (OperationResponse) {}
  rpc deleteUser(DeleteUserRequest) returns (OperationResponse) {}

  // Security Control
  rpc lockDoor(LockDoorRequest) returns (OperationResponse) {}
  rpc unlockDoor(UnlockDoorRequest) returns (OperationResponse) {}
  rpc registerSecurityDevice(SecurityDevice) returns (OperationResponse) {}
  rpc deregisterSecurityDevice(SecurityDevice) returns (OperationResponse) {}
  rpc viewDeviceEventsStream(SecurityDevice) returns (stream SecurityEvent) {}

  // User Notifications
  rpc sendUserNotification(NotificationRequest) returns (OperationResponse) {}
}

message LightingCommand {
  int32 lightingDeviceNumber = 1;
  DeviceState deviceState = 2;
  float brightness = 3;
}

message ClimateCommand {
  int32 roomNumber = 1;
  DeviceState heatingState = 2;
  DeviceState acState = 3;
  HumidifierDehumidifierState humidifierDehumidifierState = 4;
}

message NotificationRequest {
  SecurityEvent event = 1;
  SecurityEventAction action = 2;
  string message = 3;
}

message Device {
  int32 deviceNumber = 1;
  int32 roomNumber = 2;
}

message DeviceHistory {
  repeated string event = 1;
}
