/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package smarthome.client;

import io.grpc.stub.StreamObserver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import smarthome.generated.climate.ClimateDevicesState;
import smarthome.generated.climate.HumidifierDehumidifierState;
import smarthome.generated.climate.HumidityReading;
import smarthome.generated.climate.TemperatureReading;
import smarthome.generated.general.DeviceState;
import smarthome.generated.general.OperationResponse;
import smarthome.generated.lighting.LightingDevice;
import smarthome.generated.lighting.LightingDeviceDetails;
import smarthome.generated.lighting.MotionEvent;
import smarthome.generated.security.*;

import java.util.Iterator;
import java.util.Objects;

/**
 *
 * @author hager
 */
public class SmartHomeGUI extends javax.swing.JFrame {

    private static final Logger logger = LoggerFactory.getLogger(SmartHomeGUI.class);

    private final SmartHomeClient smartHomeClient;
    private StreamObserver<MotionEvent> motionEventsRequestObserver;
    private StreamObserver<LightingDevice> turnOffLightsRequestObserver;
    private StreamObserver<LockDoorRequest> lockDoorsRequestObserver;
    private StreamObserver<UnlockDoorRequest> unlockDoorsRequestObserver;

    /**
     * Creates new form SmartHomeGUI
     */
    public SmartHomeGUI() {
        initComponents();
        this.smartHomeClient = new SmartHomeClient();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLightingStateDeviceState = new javax.swing.ButtonGroup();
        respondToMotionSensorMotionState = new javax.swing.ButtonGroup();
        setHeatingStateButtonGroup = new javax.swing.ButtonGroup();
        setACStateButtonGroup = new javax.swing.ButtonGroup();
        setHumidifierDehumidifierStateButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultLightingTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        registerLightingDeviceNumberText = new javax.swing.JTextField();
        registerLightingRoomNumberText = new javax.swing.JTextField();
        registerLightingDeviceButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        deregisterLightingDeviceNumberText = new javax.swing.JTextField();
        deregisterLightingDeviceButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        setLightingStateDeviceNumberText = new javax.swing.JTextField();
        setLightingBrightnessDeviceNumberText = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        setLightingBrightnessDeviceBrightnessText = new javax.swing.JTextField();
        setLightingStateRadioButtonOn = new javax.swing.JRadioButton();
        setLightingStateRadioButtonOff = new javax.swing.JRadioButton();
        setLightingDeviceStateButton = new javax.swing.JButton();
        setLightingDeviceBrightnessButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        respondToMotionSensorRoomNumberText = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        respondToMotionSensorRadioButtonYes = new javax.swing.JRadioButton();
        respondToMotionSensorRadioButtonNo = new javax.swing.JRadioButton();
        respondToMotionSensorOpenBiStreamButton = new javax.swing.JButton();
        respondToMotionSensorSendButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        turnOffLightsDeviceNumberText = new javax.swing.JTextField();
        turnOffLightsOpenClientStreamButton = new javax.swing.JButton();
        turnOffLightsSendButton = new javax.swing.JButton();
        respondToMotionSensorCloseBiStreamButton = new javax.swing.JButton();
        turnOffLightsCloseClientStreamButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultClimateTextArea = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        setTargetClimateTempText = new javax.swing.JTextField();
        setTargetClimateHumidityText = new javax.swing.JTextField();
        setTargetClimateButton = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        respondToTempSensorTempText = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        respondToTempSensorSendButton = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        respondToHumiditySensorHumidityText = new javax.swing.JTextField();
        respondToHumiditySensorSendButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        setHeatingStateRadioButtonOn = new javax.swing.JRadioButton();
        setHeatingStateRadioButtonOff = new javax.swing.JRadioButton();
        setHeatingStateButton = new javax.swing.JButton();
        setACStateRadioButtonOn = new javax.swing.JRadioButton();
        setACStateRadioButtonOff = new javax.swing.JRadioButton();
        setACStateButton = new javax.swing.JButton();
        setHumidifierDehumidiferStateRadioButtonHumidifier = new javax.swing.JRadioButton();
        setHumidifierDehumidiferStateRadioButtonOff = new javax.swing.JRadioButton();
        setHumidifierDehumidifierStateButton = new javax.swing.JButton();
        setHumidifierDehumidiferStateRadioButtonDehumidifer = new javax.swing.JRadioButton();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jPanel6 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        getClimateDevicesStateButton = new javax.swing.JButton();
        getClimateTemperatureHistorySyncButton = new javax.swing.JButton();
        getClimateTemperatureHistoryAsyncButton = new javax.swing.JButton();
        getClimateHumidityHistorySyncButton = new javax.swing.JButton();
        getClimateHumidityHistoryAsyncButton = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultSecurityTextArea = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        lockDoorDoorNumberText = new javax.swing.JTextField();
        lockDoorButton = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        unlockDoorDoorNumberText = new javax.swing.JTextField();
        unlockDoorButton = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        registerSecurityDeviceDeviceNumberText = new javax.swing.JTextField();
        registerSecurityDeviceButton = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        registerSecurityDeviceDeviceTypeCombo = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        deregisterSecurityDeviceDeviceNumberText = new javax.swing.JTextField();
        deregisterSecurityDeviceButton = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JSeparator();
        jSeparator11 = new javax.swing.JSeparator();
        jSeparator14 = new javax.swing.JSeparator();
        jPanel9 = new javax.swing.JPanel();
        unlockDoorsUnlockButton = new javax.swing.JButton();
        lockDoorsDoorNumberText = new javax.swing.JTextField();
        lockDoorsLockButton = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        unlockDoorsDoorNumberText = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        lockDoorsOpenClientStreamButton = new javax.swing.JButton();
        lockDoorsCloseClientStreamButton = new javax.swing.JButton();
        unlockDoorsOpenClientStreamButton = new javax.swing.JButton();
        unlockDoorsCloseClientStreamButton = new javax.swing.JButton();
        jLabel46 = new javax.swing.JLabel();
        respondToSecurityEventEventTypeCombo = new javax.swing.JComboBox<>();
        respondToSecurityEventDeviceNumberText = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        respondToSecurityEventSendEventButton = new javax.swing.JButton();
        jSeparator12 = new javax.swing.JSeparator();
        jSeparator13 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resultLightingTextArea.setEditable(false);
        resultLightingTextArea.setColumns(20);
        resultLightingTextArea.setRows(5);
        jScrollPane1.setViewportView(resultLightingTextArea);

        jLabel1.setText("Results:");

        jLabel2.setText("Register Lighting Device:");

        jLabel3.setText("Deregister Lighting Device:");

        jLabel4.setText("Set Lighting State (ON/OFF):");

        jLabel5.setText("Set Lighting Brightness:");

        jLabel6.setText("Respond To Motion Sensor:");

        jLabel7.setText("Turn Off Lights:");

        jLabel8.setText("Device Number:");

        jLabel9.setText("Room Number:");

        registerLightingDeviceButton.setBackground(new java.awt.Color(153, 153, 255));
        registerLightingDeviceButton.setText("Register");
        registerLightingDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerLightingDeviceButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("Device Number:");

        deregisterLightingDeviceButton.setBackground(new java.awt.Color(153, 153, 255));
        deregisterLightingDeviceButton.setText("Deregister");
        deregisterLightingDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deregisterLightingDeviceButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Device Number:");

        jLabel12.setText("Device Number:");

        jLabel13.setText("Device State:");

        jLabel14.setText("Device Brightness:");

        setLightingStateDeviceState.add(setLightingStateRadioButtonOn);
        setLightingStateRadioButtonOn.setText("ON");

        setLightingStateDeviceState.add(setLightingStateRadioButtonOff);
        setLightingStateRadioButtonOff.setText("OFF");

        setLightingDeviceStateButton.setBackground(new java.awt.Color(153, 153, 255));
        setLightingDeviceStateButton.setText("Set State");
        setLightingDeviceStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLightingDeviceStateButtonActionPerformed(evt);
            }
        });

        setLightingDeviceBrightnessButton.setBackground(new java.awt.Color(153, 153, 255));
        setLightingDeviceBrightnessButton.setText("Set Brightness");
        setLightingDeviceBrightnessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLightingDeviceBrightnessButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Room Number:");

        jLabel16.setText("Motion State:");

        respondToMotionSensorMotionState.add(respondToMotionSensorRadioButtonYes);
        respondToMotionSensorRadioButtonYes.setText("Yes");

        respondToMotionSensorMotionState.add(respondToMotionSensorRadioButtonNo);
        respondToMotionSensorRadioButtonNo.setText("No");

        respondToMotionSensorOpenBiStreamButton.setBackground(new java.awt.Color(204, 255, 204));
        respondToMotionSensorOpenBiStreamButton.setText("Open Bi-directional Stream");
        respondToMotionSensorOpenBiStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respondToMotionSensorOpenBiStreamButtonActionPerformed(evt);
            }
        });

        respondToMotionSensorSendButton.setBackground(new java.awt.Color(153, 153, 255));
        respondToMotionSensorSendButton.setText("Send");
        respondToMotionSensorSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respondToMotionSensorSendButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Device Number:");

        turnOffLightsOpenClientStreamButton.setBackground(new java.awt.Color(204, 255, 204));
        turnOffLightsOpenClientStreamButton.setText("Open Client Stream");
        turnOffLightsOpenClientStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOffLightsOpenClientStreamButtonActionPerformed(evt);
            }
        });

        turnOffLightsSendButton.setBackground(new java.awt.Color(153, 153, 255));
        turnOffLightsSendButton.setText("Send");
        turnOffLightsSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOffLightsSendButtonActionPerformed(evt);
            }
        });

        respondToMotionSensorCloseBiStreamButton.setBackground(new java.awt.Color(204, 255, 204));
        respondToMotionSensorCloseBiStreamButton.setText("Finish / Close Stream");
        respondToMotionSensorCloseBiStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respondToMotionSensorCloseBiStreamButtonActionPerformed(evt);
            }
        });

        turnOffLightsCloseClientStreamButton.setBackground(new java.awt.Color(204, 255, 204));
        turnOffLightsCloseClientStreamButton.setText("Finish / Close Stream");
        turnOffLightsCloseClientStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOffLightsCloseClientStreamButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(setLightingStateRadioButtonOn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setLightingStateRadioButtonOff))
                            .addComponent(setLightingStateDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addComponent(setLightingDeviceStateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(setLightingBrightnessDeviceBrightnessText))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(29, 29, 29)
                                .addComponent(setLightingBrightnessDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(setLightingDeviceBrightnessButton)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(registerLightingDeviceNumberText, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(registerLightingRoomNumberText))
                        .addGap(37, 37, 37)
                        .addComponent(registerLightingDeviceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deregisterLightingDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deregisterLightingDeviceButton)
                        .addGap(63, 63, 63))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel16)
                                                .addGap(18, 18, 18)
                                                .addComponent(respondToMotionSensorRadioButtonYes)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(respondToMotionSensorRadioButtonNo))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel15)
                                                .addGap(12, 12, 12)
                                                .addComponent(respondToMotionSensorRoomNumberText)))
                                        .addGap(18, 18, 18)
                                        .addComponent(respondToMotionSensorSendButton))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(respondToMotionSensorOpenBiStreamButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(respondToMotionSensorCloseBiStreamButton)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7))
                                .addGap(297, 297, 297))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel17)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(turnOffLightsDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(turnOffLightsSendButton)
                                    .addGap(52, 52, 52))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(turnOffLightsOpenClientStreamButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(turnOffLightsCloseClientStreamButton)
                                    .addGap(94, 94, 94))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(registerLightingDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(registerLightingRoomNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(registerLightingDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(deregisterLightingDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deregisterLightingDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(setLightingStateDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(setLightingBrightnessDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(setLightingBrightnessDeviceBrightnessText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13)
                                    .addComponent(setLightingStateRadioButtonOff)
                                    .addComponent(setLightingStateRadioButtonOn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(setLightingDeviceBrightnessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)))
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(respondToMotionSensorOpenBiStreamButton)
                                    .addComponent(respondToMotionSensorCloseBiStreamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(respondToMotionSensorSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel15)
                                            .addComponent(respondToMotionSensorRoomNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel16)
                                            .addComponent(respondToMotionSensorRadioButtonYes)
                                            .addComponent(respondToMotionSensorRadioButtonNo)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(turnOffLightsOpenClientStreamButton)
                                    .addComponent(turnOffLightsCloseClientStreamButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(turnOffLightsDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(turnOffLightsSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(setLightingDeviceStateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Lighting Service", jPanel1);

        resultClimateTextArea.setEditable(false);
        resultClimateTextArea.setColumns(20);
        resultClimateTextArea.setRows(5);
        jScrollPane2.setViewportView(resultClimateTextArea);

        jLabel18.setText("Results:");

        jLabel19.setText("Set Target Climate Settings:");

        jLabel20.setText("Target Temp:");

        jLabel21.setText("Target Humidity:");

        setTargetClimateButton.setBackground(new java.awt.Color(153, 153, 255));
        setTargetClimateButton.setText("Set");
        setTargetClimateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTargetClimateButtonActionPerformed(evt);
            }
        });

        jLabel22.setText("Respond to Temp Sensor Reading:");

        jLabel23.setText("Respond to Humidity Sensor Reading:");

        jLabel24.setText("Temp Reading:");

        respondToTempSensorSendButton.setBackground(new java.awt.Color(153, 153, 255));
        respondToTempSensorSendButton.setText("Send Sensor Reading");
        respondToTempSensorSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respondToTempSensorSendButtonActionPerformed(evt);
            }
        });

        jLabel25.setText("Humidity Reading:");

        respondToHumiditySensorSendButton.setBackground(new java.awt.Color(153, 153, 255));
        respondToHumiditySensorSendButton.setText("Send Sensor Reading");
        respondToHumiditySensorSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respondToHumiditySensorSendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(24, 24, 24)
                        .addComponent(setTargetClimateTempText, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setTargetClimateHumidityText)))
                .addGap(18, 18, 18)
                .addComponent(setTargetClimateButton)
                .addGap(24, 24, 24))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(respondToTempSensorTempText, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(respondToHumiditySensorHumidityText, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(respondToHumiditySensorSendButton))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                            .addComponent(jSeparator5)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(respondToTempSensorSendButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(setTargetClimateTempText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(setTargetClimateHumidityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setTargetClimateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(respondToTempSensorTempText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(respondToTempSensorSendButton)
                .addGap(21, 21, 21)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(respondToHumiditySensorHumidityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(respondToHumiditySensorSendButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel26.setText("Set Heating State:");

        jLabel28.setText("Set Humidifier/Dehumidifier State:");

        jLabel27.setText("Set Air Conditioner State:");

        setHeatingStateButtonGroup.add(setHeatingStateRadioButtonOn);
        setHeatingStateRadioButtonOn.setText("ON");

        setHeatingStateButtonGroup.add(setHeatingStateRadioButtonOff);
        setHeatingStateRadioButtonOff.setText("OFF");

        setHeatingStateButton.setBackground(new java.awt.Color(153, 153, 255));
        setHeatingStateButton.setText("Set State");
        setHeatingStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHeatingStateButtonActionPerformed(evt);
            }
        });

        setACStateButtonGroup.add(setACStateRadioButtonOn);
        setACStateRadioButtonOn.setText("ON");

        setACStateButtonGroup.add(setACStateRadioButtonOff);
        setACStateRadioButtonOff.setText("OFF");

        setACStateButton.setBackground(new java.awt.Color(153, 153, 255));
        setACStateButton.setText("Set State");
        setACStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setACStateButtonActionPerformed(evt);
            }
        });

        setHumidifierDehumidifierStateButtonGroup.add(setHumidifierDehumidiferStateRadioButtonHumidifier);
        setHumidifierDehumidiferStateRadioButtonHumidifier.setText("Humidifier");

        setHumidifierDehumidifierStateButtonGroup.add(setHumidifierDehumidiferStateRadioButtonOff);
        setHumidifierDehumidiferStateRadioButtonOff.setText("OFF");

        setHumidifierDehumidifierStateButton.setBackground(new java.awt.Color(153, 153, 255));
        setHumidifierDehumidifierStateButton.setText("Set State");
        setHumidifierDehumidifierStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHumidifierDehumidifierStateButtonActionPerformed(evt);
            }
        });

        setHumidifierDehumidifierStateButtonGroup.add(setHumidifierDehumidiferStateRadioButtonDehumidifer);
        setHumidifierDehumidiferStateRadioButtonDehumidifer.setText("Dehumidifier");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel28)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel27)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(setHeatingStateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                                .addComponent(setHeatingStateRadioButtonOn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setHeatingStateRadioButtonOff)))
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(setACStateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                                .addComponent(setACStateRadioButtonOn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setACStateRadioButtonOff))))))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(setHumidifierDehumidiferStateRadioButtonOff)
                                    .addComponent(setHumidifierDehumidiferStateRadioButtonDehumidifer)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(setHumidifierDehumidiferStateRadioButtonHumidifier)
                                        .addGap(37, 37, 37)
                                        .addComponent(setHumidifierDehumidifierStateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 83, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator7)
                            .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel26)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setHeatingStateRadioButtonOn)
                    .addComponent(setHeatingStateRadioButtonOff))
                .addGap(18, 18, 18)
                .addComponent(setHeatingStateButton)
                .addGap(5, 5, 5)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setACStateRadioButtonOn)
                    .addComponent(setACStateRadioButtonOff))
                .addGap(18, 18, 18)
                .addComponent(setACStateButton)
                .addGap(18, 18, 18)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(setHumidifierDehumidiferStateRadioButtonOff)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setHumidifierDehumidiferStateRadioButtonHumidifier)
                    .addComponent(setHumidifierDehumidifierStateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setHumidifierDehumidiferStateRadioButtonDehumidifer)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel30.setText("Get Temperature Readings History:");

        jLabel31.setText("Get Humidity Readings History:");

        jLabel29.setText("Get Climate Devices State:");

        getClimateDevicesStateButton.setBackground(new java.awt.Color(153, 153, 255));
        getClimateDevicesStateButton.setText("Get Devices State");
        getClimateDevicesStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getClimateDevicesStateButtonActionPerformed(evt);
            }
        });

        getClimateTemperatureHistorySyncButton.setBackground(new java.awt.Color(153, 153, 255));
        getClimateTemperatureHistorySyncButton.setText("Get Temp History (Sync)");
        getClimateTemperatureHistorySyncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getClimateTemperatureHistorySyncButtonActionPerformed(evt);
            }
        });

        getClimateTemperatureHistoryAsyncButton.setBackground(new java.awt.Color(153, 153, 255));
        getClimateTemperatureHistoryAsyncButton.setText("Get Temp History (Async)");
        getClimateTemperatureHistoryAsyncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getClimateTemperatureHistoryAsyncButtonActionPerformed(evt);
            }
        });

        getClimateHumidityHistorySyncButton.setBackground(new java.awt.Color(153, 153, 255));
        getClimateHumidityHistorySyncButton.setText("Get Humidity History (Sync)");
        getClimateHumidityHistorySyncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getClimateHumidityHistorySyncButtonActionPerformed(evt);
            }
        });

        getClimateHumidityHistoryAsyncButton.setBackground(new java.awt.Color(153, 153, 255));
        getClimateHumidityHistoryAsyncButton.setText("Get Humidity History (Async)");
        getClimateHumidityHistoryAsyncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getClimateHumidityHistoryAsyncButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addComponent(jLabel30)
                            .addComponent(jLabel31)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(getClimateDevicesStateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(getClimateHumidityHistorySyncButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(getClimateHumidityHistoryAsyncButton))
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(getClimateTemperatureHistorySyncButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(getClimateTemperatureHistoryAsyncButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel29)
                .addGap(29, 29, 29)
                .addComponent(getClimateDevicesStateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getClimateTemperatureHistorySyncButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getClimateTemperatureHistoryAsyncButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getClimateHumidityHistorySyncButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getClimateHumidityHistoryAsyncButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Climate Service", jPanel2);

        jLabel32.setText("Results:");

        resultSecurityTextArea.setEditable(false);
        resultSecurityTextArea.setColumns(20);
        resultSecurityTextArea.setRows(5);
        jScrollPane3.setViewportView(resultSecurityTextArea);

        jLabel33.setText("Lock Door:");

        jLabel34.setText("Door Number:");

        lockDoorButton.setBackground(new java.awt.Color(153, 153, 255));
        lockDoorButton.setText("Lock");
        lockDoorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockDoorButtonActionPerformed(evt);
            }
        });

        jLabel35.setText("Unlock Door:");

        jLabel36.setText("Door Number:");

        unlockDoorButton.setBackground(new java.awt.Color(153, 153, 255));
        unlockDoorButton.setText("Unlock");
        unlockDoorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlockDoorButtonActionPerformed(evt);
            }
        });

        jLabel37.setText("Register Security Device:");

        jLabel38.setText("Device Number:");

        registerSecurityDeviceButton.setBackground(new java.awt.Color(153, 153, 255));
        registerSecurityDeviceButton.setText("Register");
        registerSecurityDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerSecurityDeviceButtonActionPerformed(evt);
            }
        });

        jLabel39.setText("Device Type:");

        registerSecurityDeviceDeviceTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CAMERA", "ALARM", "DOOR", "MOTION_ACTION_DETECTOR ", "BREAK_IN_DETECTOR" }));

        jLabel40.setText("Deregister Security Device:");

        jLabel41.setText("Device Number:");

        deregisterSecurityDeviceButton.setBackground(new java.awt.Color(153, 153, 255));
        deregisterSecurityDeviceButton.setText("Deregister");
        deregisterSecurityDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deregisterSecurityDeviceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel41)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deregisterSecurityDeviceDeviceNumberText))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel38)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(registerSecurityDeviceDeviceNumberText))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel39)
                                        .addGap(26, 26, 26)
                                        .addComponent(registerSecurityDeviceDeviceTypeCombo, 0, 1, Short.MAX_VALUE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel36)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(unlockDoorDoorNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(registerSecurityDeviceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(deregisterSecurityDeviceButton, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(unlockDoorButton))))
                            .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel34)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lockDoorDoorNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lockDoorButton)))
                        .addGap(0, 95, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator14, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator10)
                            .addComponent(jSeparator11))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel37)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel38)
                            .addComponent(registerSecurityDeviceDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel39)
                            .addComponent(registerSecurityDeviceDeviceTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(registerSecurityDeviceButton)))
                .addGap(20, 20, 20)
                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel40)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(deregisterSecurityDeviceDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deregisterSecurityDeviceButton))
                .addGap(18, 18, 18)
                .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(lockDoorDoorNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lockDoorButton))
                .addGap(18, 18, 18)
                .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(unlockDoorDoorNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unlockDoorButton))
                .addGap(26, 26, 26))
        );

        unlockDoorsUnlockButton.setBackground(new java.awt.Color(153, 153, 255));
        unlockDoorsUnlockButton.setText("Unlock");
        unlockDoorsUnlockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlockDoorsUnlockButtonActionPerformed(evt);
            }
        });

        lockDoorsLockButton.setBackground(new java.awt.Color(153, 153, 255));
        lockDoorsLockButton.setText("Lock");
        lockDoorsLockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockDoorsLockButtonActionPerformed(evt);
            }
        });

        jLabel43.setText("Door Number:");

        jLabel42.setText("Lock Door(s):");

        jLabel44.setText("Unlock Door(s):");

        jLabel45.setText("Door Number:");

        lockDoorsOpenClientStreamButton.setBackground(new java.awt.Color(204, 255, 204));
        lockDoorsOpenClientStreamButton.setText("Open Client Stream");
        lockDoorsOpenClientStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockDoorsOpenClientStreamButtonActionPerformed(evt);
            }
        });

        lockDoorsCloseClientStreamButton.setBackground(new java.awt.Color(204, 255, 204));
        lockDoorsCloseClientStreamButton.setText("Finish / Close Client Stream");
        lockDoorsCloseClientStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockDoorsCloseClientStreamButtonActionPerformed(evt);
            }
        });

        unlockDoorsOpenClientStreamButton.setBackground(new java.awt.Color(204, 255, 204));
        unlockDoorsOpenClientStreamButton.setText("Open Client Stream");
        unlockDoorsOpenClientStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlockDoorsOpenClientStreamButtonActionPerformed(evt);
            }
        });

        unlockDoorsCloseClientStreamButton.setBackground(new java.awt.Color(204, 255, 204));
        unlockDoorsCloseClientStreamButton.setText("Finish / Close Client Stream");
        unlockDoorsCloseClientStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlockDoorsCloseClientStreamButtonActionPerformed(evt);
            }
        });

        jLabel46.setText("Respond To Security Event:");

        respondToSecurityEventEventTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NO_EVENT", "FIRE_DETECTED", "BREAK_IN_DETECTED", "OUTDOOR_MOTION_DETECTED", "DOORBELL_RING" }));

        jLabel47.setText("Device Number:");

        jLabel48.setText("Event Type:");

        respondToSecurityEventSendEventButton.setBackground(new java.awt.Color(153, 153, 255));
        respondToSecurityEventSendEventButton.setText("Send Event");
        respondToSecurityEventSendEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respondToSecurityEventSendEventButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unlockDoorsDoorNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel44, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel43)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lockDoorsDoorNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(unlockDoorsUnlockButton)
                        .addContainerGap(181, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lockDoorsLockButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(lockDoorsOpenClientStreamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(lockDoorsCloseClientStreamButton))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel47)
                                    .addComponent(jLabel48))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(respondToSecurityEventEventTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(respondToSecurityEventDeviceNumberText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(respondToSecurityEventSendEventButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(unlockDoorsOpenClientStreamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(unlockDoorsCloseClientStreamButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator12, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator13, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel46)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel47)
                            .addComponent(respondToSecurityEventDeviceNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel48)
                            .addComponent(respondToSecurityEventEventTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(respondToSecurityEventSendEventButton)))
                .addGap(26, 26, 26)
                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel42)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lockDoorsOpenClientStreamButton)
                    .addComponent(lockDoorsCloseClientStreamButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(lockDoorsDoorNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lockDoorsLockButton))
                .addGap(18, 18, 18)
                .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel44)
                .addGap(12, 12, 12)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unlockDoorsOpenClientStreamButton)
                    .addComponent(unlockDoorsCloseClientStreamButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(unlockDoorsDoorNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unlockDoorsUnlockButton))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Security Service", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void respondToMotionSensorSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respondToMotionSensorSendButtonActionPerformed
        try {
            int roomNumber = Integer.parseInt(respondToMotionSensorRoomNumberText.getText());
            boolean motionDetected;
            if (respondToMotionSensorRadioButtonYes.isSelected()) {
                motionDetected = true;
            } else if (respondToMotionSensorRadioButtonNo.isSelected()) {
                motionDetected = false;
            } else {
                throw new IllegalArgumentException("No motion state Yes/No selected, please select the detected motion state");
            }

            this.motionEventsRequestObserver.onNext(MotionEvent.newBuilder()
                    .setRoomNumber(roomNumber)
                    .setMotionState(motionDetected)
                    .build());

            resultLightingTextArea.append("Sent Motion Sensor input '" + motionDetected + "' for room: " + roomNumber + "\n");
        } catch (Exception e) {
            resultLightingTextArea.append("Error sending motion sensor input due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_respondToMotionSensorSendButtonActionPerformed

    private void turnOffLightsSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOffLightsSendButtonActionPerformed
        try {
            int deviceNumber = Integer.parseInt(turnOffLightsDeviceNumberText.getText());

            this.turnOffLightsRequestObserver.onNext(LightingDevice.newBuilder()
                    .setDeviceNumber(deviceNumber)
                    .build());

            resultLightingTextArea.append("Sent Turn Off Lights request for device: " + deviceNumber + "\n");
        } catch (Exception e) {
            resultLightingTextArea.append("Error sending turn off lights request due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_turnOffLightsSendButtonActionPerformed

    private void registerLightingDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerLightingDeviceButtonActionPerformed

        try {
            int deviceNumber = Integer.parseInt(registerLightingDeviceNumberText.getText());
            int roomNumber = Integer.parseInt(registerLightingRoomNumberText.getText());

            LightingDeviceDetails lightingDeviceDetails = smartHomeClient.registerLightingDevice(deviceNumber, roomNumber);

            resultLightingTextArea.append("Successfully Registered Lighting Device: "
                    + lightingDeviceDetails.toString().replace("\n", "")
                    + "\n");
        } catch (Exception e) {
            resultLightingTextArea.append("Error registering lighting device due to: " + e.getMessage() + "\n");
        }

    }//GEN-LAST:event_registerLightingDeviceButtonActionPerformed

    private void setLightingDeviceStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLightingDeviceStateButtonActionPerformed
        try {
            int deviceNumber = Integer.parseInt(setLightingStateDeviceNumberText.getText());
            DeviceState deviceState;
            if (setLightingStateRadioButtonOn.isSelected()) {
                deviceState = DeviceState.ON;
            } else if (setLightingStateRadioButtonOff.isSelected()) {
                deviceState = DeviceState.OFF;
            } else {
                throw new IllegalArgumentException("No lighting state On/Off selected, please select the desired lighting state");
            }

            LightingDeviceDetails lightingDeviceDetails = smartHomeClient.setLightingState(deviceNumber, deviceState);

            resultLightingTextArea.append("Successfully Set Lighting Device '"
                    + lightingDeviceDetails.getLightingDevice().getDeviceNumber()
                    + "' State to: " + deviceState + "\n");
        } catch (Exception e) {
            resultLightingTextArea.append("Error setting lighting device state for device '"
                    + setLightingStateDeviceNumberText.getText() + "' due to : "
                    + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_setLightingDeviceStateButtonActionPerformed

    private void deregisterLightingDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deregisterLightingDeviceButtonActionPerformed
        try {
            int deviceNumber = Integer.parseInt(deregisterLightingDeviceNumberText.getText());

            LightingDeviceDetails lightingDeviceDetails = smartHomeClient.deregisterLightingDevice(deviceNumber);

            resultLightingTextArea.append("Successfully Deregistered Lighting Device: "
                    + lightingDeviceDetails.toString().replace("\n", "")
                    + "\n");
        } catch (Exception e) {
            resultLightingTextArea.append("Error deregistering lighting device due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_deregisterLightingDeviceButtonActionPerformed

    private void setLightingDeviceBrightnessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLightingDeviceBrightnessButtonActionPerformed
        try {
            int deviceNumber = Integer.parseInt(setLightingBrightnessDeviceNumberText.getText());
            int brightness = Integer.parseInt(setLightingBrightnessDeviceBrightnessText.getText());

            LightingDeviceDetails lightingDeviceDetails = smartHomeClient.setLightingBrightness(deviceNumber, brightness);

            resultLightingTextArea.append("Successfully Set Lighting Device '"
                    + lightingDeviceDetails.getLightingDevice().getDeviceNumber()
                    + "' Brightness to: " + brightness + "\n");
        } catch (Exception e) {
            resultLightingTextArea.append("Error setting lighting device brightness for device '"
                    + setLightingBrightnessDeviceNumberText.getText() + "' due to : "
                    + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_setLightingDeviceBrightnessButtonActionPerformed

    private void respondToMotionSensorOpenBiStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respondToMotionSensorOpenBiStreamButtonActionPerformed
        this.motionEventsRequestObserver = smartHomeClient.respondToMotionDetection(new StreamObserver<LightingDeviceDetails>() {
            @Override
            public void onNext(LightingDeviceDetails lightingDeviceDetails) {
                if (lightingDeviceDetails.getLightingDeviceState() == DeviceState.ON) {
                    resultLightingTextArea.append("Motion Sensor Turned on light device: (device:"
                            + lightingDeviceDetails.getLightingDevice().getDeviceNumber()
                            + ", room=" + lightingDeviceDetails.getLightingDevice().getRoomNumber() + ") \n");
                } else {
                    resultLightingTextArea.append("Motion Sensor Turned off light device: (device:"
                            + lightingDeviceDetails.getLightingDevice().getDeviceNumber()
                            + ", room=" + lightingDeviceDetails.getLightingDevice().getRoomNumber() + ") \n");
                }
            }

            @Override
            public void onError(Throwable t) {
                resultLightingTextArea.append("Error in Motion Sensor stream: " + t.getMessage() + "\n");
                smartHomeClient.cancelOperation();
            }

            @Override
            public void onCompleted() {
                resultLightingTextArea.append("Motion Sensor stream completed.\n");
            }
        });
        resultLightingTextArea.append("Motion Sensor bi-stream opened.\n");
    }//GEN-LAST:event_respondToMotionSensorOpenBiStreamButtonActionPerformed

    private void respondToMotionSensorCloseBiStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respondToMotionSensorCloseBiStreamButtonActionPerformed
        if (this.motionEventsRequestObserver != null) {
            this.motionEventsRequestObserver.onCompleted();
            this.motionEventsRequestObserver = null;
        }
        resultLightingTextArea.append("Motion Sensor stream closed.\n");
    }//GEN-LAST:event_respondToMotionSensorCloseBiStreamButtonActionPerformed

    private void turnOffLightsOpenClientStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOffLightsOpenClientStreamButtonActionPerformed
        this.turnOffLightsRequestObserver = smartHomeClient.turnOffLights(new StreamObserver<OperationResponse>() {
            @Override
            public void onNext(OperationResponse operationResponse) {
                resultLightingTextArea.append("Turn Off Lights Response: "
                        + operationResponse.toString().replace("\n", "") + "\n");
            }

            @Override
            public void onError(Throwable t) {
                resultLightingTextArea.append("Error in Turn Off Lights stream: " + t.getMessage() + "\n");
                smartHomeClient.cancelOperation();
            }

            @Override
            public void onCompleted() {
                resultLightingTextArea.append("Turn Off Lights stream completed.\n");
            }
        });
        resultLightingTextArea.append("Turn Off Lights client stream opened.\n");
    }//GEN-LAST:event_turnOffLightsOpenClientStreamButtonActionPerformed

    private void turnOffLightsCloseClientStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOffLightsCloseClientStreamButtonActionPerformed
        if (this.turnOffLightsRequestObserver != null) {
            this.turnOffLightsRequestObserver.onCompleted();
            this.turnOffLightsRequestObserver = null;
        }
        resultLightingTextArea.append("Turn Off Lights stream closed.\n");
    }//GEN-LAST:event_turnOffLightsCloseClientStreamButtonActionPerformed

    private void setTargetClimateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTargetClimateButtonActionPerformed
        try {
            int targetTemperature = Integer.parseInt(setTargetClimateTempText.getText());
            int targetHumidity = Integer.parseInt(setTargetClimateHumidityText.getText());

            OperationResponse operationResponse = smartHomeClient.setTargetClimateSettings(targetTemperature, targetHumidity);

            resultClimateTextArea.append("Successfully Set Target Climate settings: "
                    + operationResponse.getMessage()
                    + "\n");
        } catch (Exception e) {
            resultClimateTextArea.append("Error setting target climate settings due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_setTargetClimateButtonActionPerformed

    private void respondToTempSensorSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respondToTempSensorSendButtonActionPerformed
        try {
            int temperatureReading = Integer.parseInt(respondToTempSensorTempText.getText());

            ClimateDevicesState climateDevicesState = smartHomeClient.respondToTemperatureReading(temperatureReading);

            resultClimateTextArea.append("Successfully Responded to Temperature Sensor input '" + temperatureReading
                    + "' and now current devices state became: "
                    + "[Heating: " + climateDevicesState.getHeatingState()
                    + ", AirConditioner: " + climateDevicesState.getAcState()
                    + ", Humidifier/Dehumidifier: " + climateDevicesState.getHumidityDeviceState() + "]"
                    + "\n");
        } catch (Exception e) {
            resultClimateTextArea.append("Error sending temperature sensor input due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_respondToTempSensorSendButtonActionPerformed

    private void respondToHumiditySensorSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respondToHumiditySensorSendButtonActionPerformed
        try {
            int humidityReading = Integer.parseInt(respondToHumiditySensorHumidityText.getText());

            ClimateDevicesState climateDevicesState = smartHomeClient.respondToHumidityReading(humidityReading);

            resultClimateTextArea.append("Successfully Responded to Humidity Sensor input '" + humidityReading
                    + "' and now current devices state became: "
                    + "[Heating: " + climateDevicesState.getHeatingState()
                    + ", AirConditioner: " + climateDevicesState.getAcState()
                    + ", Humidifier/Dehumidifier: " + climateDevicesState.getHumidityDeviceState() + "]"
                    + "\n");
        } catch (Exception e) {
            resultClimateTextArea.append("Error sending humidity sensor input due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_respondToHumiditySensorSendButtonActionPerformed

    private void setHeatingStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHeatingStateButtonActionPerformed
        try {
            DeviceState deviceState;
            if (setHeatingStateRadioButtonOn.isSelected()) {
                deviceState = DeviceState.ON;
            } else if (setHeatingStateRadioButtonOff.isSelected()) {
                deviceState = DeviceState.OFF;
            } else {
                throw new IllegalArgumentException("No heating state On/Off selected, please select the desired heating state");
            }

            ClimateDevicesState climateDevicesState = smartHomeClient.setHeatingState(deviceState);

            resultClimateTextArea.append("Successfully Set Heating State to: " + deviceState + ", now devices state became: "
                    + "[Heating: " + climateDevicesState.getHeatingState()
                    + ", AirConditioner: " + climateDevicesState.getAcState()
                    + ", Humidifier/Dehumidifier: " + climateDevicesState.getHumidityDeviceState() + "]"
                    + "\n");
        } catch (Exception e) {
            resultClimateTextArea.append("Error setting heating state due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_setHeatingStateButtonActionPerformed

    private void setACStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setACStateButtonActionPerformed
        try {
            DeviceState deviceState;
            if (setACStateRadioButtonOn.isSelected()) {
                deviceState = DeviceState.ON;
            } else if (setACStateRadioButtonOff.isSelected()) {
                deviceState = DeviceState.OFF;
            } else {
                throw new IllegalArgumentException("No AC state On/Off selected, please select the desired AC state");
            }

            ClimateDevicesState climateDevicesState = smartHomeClient.setACState(deviceState);

            resultClimateTextArea.append("Successfully Set AC State to: " + deviceState + ", now devices state became: "
                    + "[Heating: " + climateDevicesState.getHeatingState()
                    + ", AirConditioner: " + climateDevicesState.getAcState()
                    + ", Humidifier/Dehumidifier: " + climateDevicesState.getHumidityDeviceState() + "]"
                    + "\n");
        } catch (Exception e) {
            resultClimateTextArea.append("Error setting AC state due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_setACStateButtonActionPerformed

    private void setHumidifierDehumidifierStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHumidifierDehumidifierStateButtonActionPerformed
        try {
            HumidifierDehumidifierState humidifierDehumidifierState;
            if (setHumidifierDehumidiferStateRadioButtonHumidifier.isSelected()) {
                humidifierDehumidifierState = HumidifierDehumidifierState.HUMIDIFIER;
            } else if (setHumidifierDehumidiferStateRadioButtonDehumidifer.isSelected()) {
                humidifierDehumidifierState = HumidifierDehumidifierState.DEHUMIDIFIER;
            } else if (setHumidifierDehumidiferStateRadioButtonOff.isSelected()) {
                humidifierDehumidifierState = HumidifierDehumidifierState.HUMIDIFIER_DEHUMIDIFIER_OFF;
            } else {
                throw new IllegalArgumentException("No humidifier/dehumidifier state selected, please select the desired state");
            }

            ClimateDevicesState climateDevicesState = smartHomeClient.setHumidifierDehumidifierState(humidifierDehumidifierState);

            resultClimateTextArea.append("Successfully Set Humidifier/Dehumidifier State to: " + humidifierDehumidifierState + ", now devices state became: "
                    + "[Heating: " + climateDevicesState.getHeatingState()
                    + ", AirConditioner: " + climateDevicesState.getAcState()
                    + ", Humidifier/Dehumidifier: " + climateDevicesState.getHumidityDeviceState() + "]"
                    + "\n");
        } catch (Exception e) {
            resultClimateTextArea.append("Error setting humidifier/dehumidifier state due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_setHumidifierDehumidifierStateButtonActionPerformed

    private void getClimateDevicesStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getClimateDevicesStateButtonActionPerformed
        try {
            ClimateDevicesState climateDevicesState = smartHomeClient.getClimateDevicesState();

            resultClimateTextArea.append("Successfully Retrieved Current Climate Devices State: "
                    + "[Heating: " + climateDevicesState.getHeatingState()
                    + ", AirConditioner: " + climateDevicesState.getAcState()
                    + ", Humidifier/Dehumidifier: " + climateDevicesState.getHumidityDeviceState() + "]"
                    + "\n");
        } catch (Exception e) {
            resultClimateTextArea.append("Error getting climate devices state due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_getClimateDevicesStateButtonActionPerformed

    private void getClimateTemperatureHistorySyncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getClimateTemperatureHistorySyncButtonActionPerformed
        try {
            Iterator<TemperatureReading> temperatureHistory = smartHomeClient.getTemperatureHistory();

            StringBuilder sb = new StringBuilder();
            while (temperatureHistory.hasNext()) {
                TemperatureReading temperatureReading = temperatureHistory.next();
                sb.append(temperatureReading.toString().replace("\n", " ")).append("\n");
            }
            resultClimateTextArea.append("Successfully Retrieved Temperature History: \n" + sb);
        } catch (Exception e) {
            resultClimateTextArea.append("Error getting temperature history due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_getClimateTemperatureHistorySyncButtonActionPerformed

    private void getClimateTemperatureHistoryAsyncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getClimateTemperatureHistoryAsyncButtonActionPerformed
        try {
            smartHomeClient.getTemperatureHistoryAsync(new StreamObserver<TemperatureReading>() {
                @Override
                public void onNext(TemperatureReading temperatureReading) {
                    resultClimateTextArea.append("Received Temperature Reading: "
                            + temperatureReading.toString().replace("\n", " ") + "\n");
                }

                @Override
                public void onError(Throwable t) {
                    resultClimateTextArea.append("Error in Temperature History stream: " + t.getMessage() + "\n");
                    smartHomeClient.cancelOperation();
                }

                @Override
                public void onCompleted() {
                    resultClimateTextArea.append("Temperature History stream completed.\n");
                }
            });
            resultClimateTextArea.append("Temperature History async stream opened.\n");
        } catch (Exception e) {
            resultClimateTextArea.append("Error opening temperature history async stream due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_getClimateTemperatureHistoryAsyncButtonActionPerformed

    private void getClimateHumidityHistorySyncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getClimateHumidityHistorySyncButtonActionPerformed
        try {
            Iterator<HumidityReading> humidityHistory = smartHomeClient.getHumidityHistory();

            StringBuilder sb = new StringBuilder();
            while (humidityHistory.hasNext()) {
                HumidityReading humidityReading = humidityHistory.next();
                sb.append(humidityReading.toString().replace("\n", " ")).append("\n");
            }
            resultClimateTextArea.append("Successfully Retrieved Humidity History: \n" + sb);
        } catch (Exception e) {
            resultClimateTextArea.append("Error getting humidity history due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_getClimateHumidityHistorySyncButtonActionPerformed

    private void getClimateHumidityHistoryAsyncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getClimateHumidityHistoryAsyncButtonActionPerformed
        try {
            smartHomeClient.getHumidityHistoryAsync(new StreamObserver<HumidityReading>() {
                @Override
                public void onNext(HumidityReading humidityReading) {
                    resultClimateTextArea.append("Received Humidity Reading: "
                            + humidityReading.toString().replace("\n", " ") + "\n");
                }

                @Override
                public void onError(Throwable t) {
                    resultClimateTextArea.append("Error in Humidity History stream: " + t.getMessage() + "\n");
                    smartHomeClient.cancelOperation();
                }

                @Override
                public void onCompleted() {
                    resultClimateTextArea.append("Humidity History stream completed.\n");
                }
            });
            resultClimateTextArea.append("Humidity History async stream opened.\n");
        } catch (Exception e) {
            resultClimateTextArea.append("Error opening humidity history async stream due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_getClimateHumidityHistoryAsyncButtonActionPerformed

    private void registerSecurityDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerSecurityDeviceButtonActionPerformed
        try {
            int deviceNumber = Integer.parseInt(registerSecurityDeviceDeviceNumberText.getText());
            SecurityDeviceType deviceType = SecurityDeviceType.valueOf(
                    Objects.requireNonNull(registerSecurityDeviceDeviceTypeCombo.getSelectedItem()).toString()
            );

            OperationResponse operationResponse = smartHomeClient.registerSecurityDevice(deviceNumber, deviceType);

            resultSecurityTextArea.append("Successfully Registered '" + deviceType + "' Security Device with number '"
                    + deviceNumber + "': " + operationResponse.getMessage()
                    + "\n");
        } catch (Exception e) {
            resultSecurityTextArea.append("Error registering security device due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_registerSecurityDeviceButtonActionPerformed

    private void deregisterSecurityDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deregisterSecurityDeviceButtonActionPerformed
        try {
            int deviceNumber = Integer.parseInt(deregisterSecurityDeviceDeviceNumberText.getText());

            OperationResponse operationResponse = smartHomeClient.deregisterSecurityDevice(deviceNumber);

            resultSecurityTextArea.append("Successfully Deregistered Security Device with number '"
                    + deviceNumber + "': " + operationResponse.getMessage()
                    + "\n");
        } catch (Exception e) {
            resultSecurityTextArea.append("Error deregistering security device due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_deregisterSecurityDeviceButtonActionPerformed

    private void lockDoorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockDoorButtonActionPerformed
        try {
            int doorNumber = Integer.parseInt(lockDoorDoorNumberText.getText());

            OperationResponse operationResponse = smartHomeClient.lockDoor(doorNumber);

            resultSecurityTextArea.append("Successfully Locked Door with number '"
                    + doorNumber + "': " + operationResponse.getMessage()
                    + "\n");
        } catch (Exception e) {
            resultSecurityTextArea.append("Error locking door due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_lockDoorButtonActionPerformed

    private void unlockDoorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockDoorButtonActionPerformed
        try {
            int doorNumber = Integer.parseInt(unlockDoorDoorNumberText.getText());

            OperationResponse operationResponse = smartHomeClient.unlockDoor(doorNumber);

            resultSecurityTextArea.append("Successfully Unlocked Door with number '"
                    + doorNumber + "': " + operationResponse.getMessage()
                    + "\n");
        } catch (Exception e) {
            resultSecurityTextArea.append("Error unlocking door due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_unlockDoorButtonActionPerformed

    private void respondToSecurityEventSendEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respondToSecurityEventSendEventButtonActionPerformed
        try {
            SecurityEvent securityEvent = SecurityEvent.newBuilder()
                    .setDeviceNumber(Integer.parseInt(respondToSecurityEventDeviceNumberText.getText()))
                    .setEventType(SecurityEventType.valueOf(
                            Objects.requireNonNull(respondToSecurityEventEventTypeCombo.getSelectedItem()).toString()
                    ))
                    .build();

            smartHomeClient.respondToSecurityEvent(securityEvent, new StreamObserver<SecurityEventAction>() {
                @Override
                public void onNext(SecurityEventAction securityEventAction) {
                    resultSecurityTextArea.append("Received Security Action: "
                            + securityEventAction.toString().replace("\n", " ") + "\n");
                }

                @Override
                public void onError(Throwable t) {
                    resultSecurityTextArea.append("Error in Security Event stream: " + t.getMessage() + "\n");
                    smartHomeClient.cancelOperation();
                }

                @Override
                public void onCompleted() {
                    resultSecurityTextArea.append("Security Event stream completed.\n");
                }
            });
            resultSecurityTextArea.append("Sent Security Event: " + securityEvent.toString().replace("\n", " ") + "\n");
        } catch (Exception e) {
            resultSecurityTextArea.append("Error sending security event due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_respondToSecurityEventSendEventButtonActionPerformed

    private void lockDoorsOpenClientStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockDoorsOpenClientStreamButtonActionPerformed
        this.lockDoorsRequestObserver = smartHomeClient.lockDoors(new StreamObserver<OperationResponse>() {
            @Override
            public void onNext(OperationResponse operationResponse) {
                resultSecurityTextArea.append("Lock Doors Response: "
                        + operationResponse.toString().replace("\n", " ") + "\n");
            }

            @Override
            public void onError(Throwable t) {
                resultSecurityTextArea.append("Error in Lock Doors stream: " + t.getMessage() + "\n");
                smartHomeClient.cancelOperation();
            }

            @Override
            public void onCompleted() {
                resultSecurityTextArea.append("Lock Doors stream completed.\n");
            }
        });
        resultSecurityTextArea.append("Lock Doors client stream opened.\n");
    }//GEN-LAST:event_lockDoorsOpenClientStreamButtonActionPerformed

    private void lockDoorsLockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockDoorsLockButtonActionPerformed
        try {
            int doorNumber = Integer.parseInt(lockDoorsDoorNumberText.getText());

            this.lockDoorsRequestObserver.onNext(LockDoorRequest.newBuilder()
                    .setDoorNumber(doorNumber)
                    .build());

            resultSecurityTextArea.append("Sent Lock Door request for door: " + doorNumber + "\n");
        } catch (Exception e) {
            resultSecurityTextArea.append("Error sending lock door request due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_lockDoorsLockButtonActionPerformed

    private void lockDoorsCloseClientStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockDoorsCloseClientStreamButtonActionPerformed
        if (this.lockDoorsRequestObserver != null) {
            this.lockDoorsRequestObserver.onCompleted();
            this.lockDoorsRequestObserver = null;
        }
        resultSecurityTextArea.append("Lock Doors stream closed.\n");
    }//GEN-LAST:event_lockDoorsCloseClientStreamButtonActionPerformed

    private void unlockDoorsOpenClientStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockDoorsOpenClientStreamButtonActionPerformed
        this.unlockDoorsRequestObserver = smartHomeClient.unlockDoors(new StreamObserver<OperationResponse>() {
            @Override
            public void onNext(OperationResponse operationResponse) {
                resultSecurityTextArea.append("Unlock Doors Response: "
                        + operationResponse.toString().replace("\n", " ") + "\n");
            }

            @Override
            public void onError(Throwable t) {
                resultSecurityTextArea.append("Error in Unlock Doors stream: " + t.getMessage() + "\n");
                smartHomeClient.cancelOperation();
            }

            @Override
            public void onCompleted() {
                resultSecurityTextArea.append("Unlock Doors stream completed.\n");
            }
        });
        resultSecurityTextArea.append("Unlock Doors client stream opened.\n");
    }//GEN-LAST:event_unlockDoorsOpenClientStreamButtonActionPerformed

    private void unlockDoorsUnlockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockDoorsUnlockButtonActionPerformed
        try {
            int doorNumber = Integer.parseInt(unlockDoorsDoorNumberText.getText());

            this.unlockDoorsRequestObserver.onNext(UnlockDoorRequest.newBuilder()
                    .setDoorNumber(doorNumber)
                    .build());

            resultSecurityTextArea.append("Sent Unlock Door request for door: " + doorNumber + "\n");
        } catch (Exception e) {
            resultSecurityTextArea.append("Error sending unlock door request due to: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_unlockDoorsUnlockButtonActionPerformed

    private void unlockDoorsCloseClientStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockDoorsCloseClientStreamButtonActionPerformed
        if (this.unlockDoorsRequestObserver != null) {
            this.unlockDoorsRequestObserver.onCompleted();
            this.unlockDoorsRequestObserver = null;
        }
        resultSecurityTextArea.append("Unlock Doors stream closed.\n");
    }//GEN-LAST:event_unlockDoorsCloseClientStreamButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            logger.error("Encountered an error 'ClassNotFoundException' while creating instances of GUI classes: {}", ex.getMessage());
        } catch (InstantiationException ex) {
            logger.error("Encountered an error 'InstantiationException' while instantiating GUI classes: {}", ex.getMessage());
        } catch (IllegalAccessException ex) {
            logger.error("Encountered an error 'IllegalAccessException' while instantiating GUI classes: {}", ex.getMessage());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            logger.error("Encountered an error 'UnsupportedLookAndFeelException' while instantiating GUI classes: {}", ex.getMessage());
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SmartHomeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deregisterLightingDeviceButton;
    private javax.swing.JTextField deregisterLightingDeviceNumberText;
    private javax.swing.JButton deregisterSecurityDeviceButton;
    private javax.swing.JTextField deregisterSecurityDeviceDeviceNumberText;
    private javax.swing.JButton getClimateDevicesStateButton;
    private javax.swing.JButton getClimateHumidityHistoryAsyncButton;
    private javax.swing.JButton getClimateHumidityHistorySyncButton;
    private javax.swing.JButton getClimateTemperatureHistoryAsyncButton;
    private javax.swing.JButton getClimateTemperatureHistorySyncButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea resultClimateTextArea;
    private javax.swing.JTextArea resultSecurityTextArea;
    private javax.swing.JButton lockDoorButton;
    private javax.swing.JTextField lockDoorDoorNumberText;
    private javax.swing.JButton lockDoorsCloseClientStreamButton;
    private javax.swing.JTextField lockDoorsDoorNumberText;
    private javax.swing.JButton lockDoorsLockButton;
    private javax.swing.JButton lockDoorsOpenClientStreamButton;
    private javax.swing.JButton registerLightingDeviceButton;
    private javax.swing.JTextField registerLightingDeviceNumberText;
    private javax.swing.JTextField registerLightingRoomNumberText;
    private javax.swing.JButton registerSecurityDeviceButton;
    private javax.swing.JTextField registerSecurityDeviceDeviceNumberText;
    private javax.swing.JComboBox<String> registerSecurityDeviceDeviceTypeCombo;
    private javax.swing.JTextField respondToHumiditySensorHumidityText;
    private javax.swing.JButton respondToHumiditySensorSendButton;
    private javax.swing.JButton respondToMotionSensorCloseBiStreamButton;
    private javax.swing.ButtonGroup respondToMotionSensorMotionState;
    private javax.swing.JButton respondToMotionSensorOpenBiStreamButton;
    private javax.swing.JRadioButton respondToMotionSensorRadioButtonNo;
    private javax.swing.JRadioButton respondToMotionSensorRadioButtonYes;
    private javax.swing.JTextField respondToMotionSensorRoomNumberText;
    private javax.swing.JButton respondToMotionSensorSendButton;
    private javax.swing.JTextField respondToSecurityEventDeviceNumberText;
    private javax.swing.JComboBox<String> respondToSecurityEventEventTypeCombo;
    private javax.swing.JButton respondToSecurityEventSendEventButton;
    private javax.swing.JButton respondToTempSensorSendButton;
    private javax.swing.JTextField respondToTempSensorTempText;
    private javax.swing.JTextArea resultLightingTextArea;
    private javax.swing.JButton setACStateButton;
    private javax.swing.ButtonGroup setACStateButtonGroup;
    private javax.swing.JRadioButton setACStateRadioButtonOff;
    private javax.swing.JRadioButton setACStateRadioButtonOn;
    private javax.swing.JButton setHeatingStateButton;
    private javax.swing.ButtonGroup setHeatingStateButtonGroup;
    private javax.swing.JRadioButton setHeatingStateRadioButtonOff;
    private javax.swing.JRadioButton setHeatingStateRadioButtonOn;
    private javax.swing.JRadioButton setHumidifierDehumidiferStateRadioButtonDehumidifer;
    private javax.swing.JRadioButton setHumidifierDehumidiferStateRadioButtonHumidifier;
    private javax.swing.JRadioButton setHumidifierDehumidiferStateRadioButtonOff;
    private javax.swing.JButton setHumidifierDehumidifierStateButton;
    private javax.swing.ButtonGroup setHumidifierDehumidifierStateButtonGroup;
    private javax.swing.JTextField setLightingBrightnessDeviceBrightnessText;
    private javax.swing.JTextField setLightingBrightnessDeviceNumberText;
    private javax.swing.JButton setLightingDeviceStateButton;
    private javax.swing.JButton setLightingDeviceBrightnessButton;
    private javax.swing.JTextField setLightingStateDeviceNumberText;
    private javax.swing.ButtonGroup setLightingStateDeviceState;
    private javax.swing.JRadioButton setLightingStateRadioButtonOff;
    private javax.swing.JRadioButton setLightingStateRadioButtonOn;
    private javax.swing.JButton setTargetClimateButton;
    private javax.swing.JTextField setTargetClimateHumidityText;
    private javax.swing.JTextField setTargetClimateTempText;
    private javax.swing.JButton turnOffLightsCloseClientStreamButton;
    private javax.swing.JTextField turnOffLightsDeviceNumberText;
    private javax.swing.JButton turnOffLightsOpenClientStreamButton;
    private javax.swing.JButton turnOffLightsSendButton;
    private javax.swing.JButton unlockDoorButton;
    private javax.swing.JTextField unlockDoorDoorNumberText;
    private javax.swing.JButton unlockDoorsCloseClientStreamButton;
    private javax.swing.JTextField unlockDoorsDoorNumberText;
    private javax.swing.JButton unlockDoorsOpenClientStreamButton;
    private javax.swing.JButton unlockDoorsUnlockButton;
    // End of variables declaration//GEN-END:variables
}
